AWSTemplateFormatVersion: "2010-09-09"
Description: SAM TypeScript Lambdas - Connect Async Job POC
Transform: AWS::Serverless-2016-10-31
  
Parameters:
  PrefixParameter:
    Type: String
    Description: "Naming standard prefix to use for resources"
    Default: "-modzel-"

  LambdaProvisionedConcurrentExecutions:
    Type: String
    Description: "provisioned concurrency count for function"
    Default: "2"

  LambdaAlias:
    Type: String
    Description: "Alias $LATEST version of Lambda deployed. Needed for provisioning concurrency"
    Default: "live"

  ConnectInstanceId:
    Description: Connect Instance Id
    Type: String
    Default: ""

Conditions:
  ConnectInstanceIdDefined: !Not [!Equals ["", !Ref ConnectInstanceId]]

Globals:
  Function:
    Timeout: 8
    Runtime: nodejs12.x
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        LOG_LEVEL: debug
    
Resources:
  
  JobQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "connect${PrefixParameter}job-queue"

  JobTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub dynamodb${PrefixParameter}job-table
      AttributeDefinitions:
        - AttributeName: JobId
          AttributeType: S
      KeySchema:
        - AttributeName: JobId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  JobSubmissionFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "role${PrefixParameter}JobSubmission"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  JobSubmissionFunctionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "policy${PrefixParameter}JobSubmission"
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt JobQueue.Arn
      Roles:
        - !Ref JobSubmissionFunctionRole

  JobSubmissionFunction:
    Type: "AWS::Serverless::Function"
    DependsOn: JobSubmissionFunctionPolicy
    Properties:
      FunctionName: !Sub "lambda${PrefixParameter}JobSubmission"
      # Will publish a Version and create/update Alias `live` to point to it
      # An alias is needed so that we can use provisioned concurrency
      #AutoPublishAlias: !Ref LambdaAlias
      # ProvisionedConcurrencyConfig is only allowed here if AutoPublishAlias is set 
      #ProvisionedConcurrencyConfig:
      #  ProvisionedConcurrentExecutions: !Ref LambdaProvisionedConcurrentExecutions
      CodeUri: src/jobSubmission/
      Handler: handler.handler
      Role: !GetAtt JobSubmissionFunctionRole.Arn
      Environment:
        Variables:
          QUEUE_URL: !Ref JobQueue
          LOOKUP_CUSTOMER: !GetAtt JobLookupCustomerFunction.Arn

  # allow connect to invoke the function by its alias
  # JobSubmissionFunctionConnectPermissionOnAlias:
  #   Condition: ConnectInstanceIdDefined
  #   Type: AWS::Lambda::Permission
  #   # hack, depends on generated resource name. Can't use !Sub
  #   DependsOn: "JobSubmissionFunctionAliaslive"
  #   Properties:
  #     FunctionName: !Join
  #       - ":"
  #       - - !GetAtt JobSubmissionFunction.Arn
  #         - !Ref LambdaAlias
  #     Action: "lambda:InvokeFunction"
  #     Principal: connect.amazonaws.com
  #     SourceAccount:
  #       Ref: "AWS::AccountId"
  #     SourceArn: !Sub "arn:aws:connect:${AWS::Region}:${AWS::AccountId}:instance/${ConnectInstanceId}"

  JobStatusFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "role${PrefixParameter}JobStatus"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  JobStatusFunctionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "policy${PrefixParameter}JobStatus"
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource:
              - !GetAtt JobTable.Arn
      Roles:
        - !Ref JobStatusFunctionRole

  JobStatusFunction:
    Type: "AWS::Serverless::Function"
    DependsOn: JobStatusFunctionPolicy
    Properties:
      FunctionName: !Sub "lambda${PrefixParameter}JobStatus"
      # Will publish a Version and create/update Alias `live` to point to it
      # An alias is needed so that we can use provisioned concurrency
      #AutoPublishAlias: !Ref LambdaAlias
      # ProvisionedConcurrencyConfig is only allowed here if AutoPublishAlias is set 
      #ProvisionedConcurrencyConfig:
      #  ProvisionedConcurrentExecutions: !Ref LambdaProvisionedConcurrentExecutions
      CodeUri: src/jobStatus/
      Handler: handler.handler
      Role: !GetAtt JobStatusFunctionRole.Arn
      Environment:
        Variables:
          JOB_TABLE: !Ref JobTable

  # allow connect to invoke the function by its alias
  # JobStatusFunctionConnectPermissionOnAlias:
  #   Condition: ConnectInstanceIdDefined
  #   Type: AWS::Lambda::Permission
  #   # hack, depends on generated resource name. Can't use !Sub
  #   DependsOn: "JobSubmissionFunctionAliaslive"
  #   Properties:
  #     FunctionName: !Join
  #       - ":"
  #       - - !GetAtt JobSubmissionFunction.Arn
  #         - !Ref LambdaAlias
  #     Action: "lambda:InvokeFunction"
  #     Principal: connect.amazonaws.com
  #     SourceAccount:
  #       Ref: "AWS::AccountId"
  #     SourceArn: !Sub "arn:aws:connect:${AWS::Region}:${AWS::AccountId}:instance/${ConnectInstanceId}"

  JobProcessFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "role${PrefixParameter}JobProcess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  JobProcessFunctionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "policy${PrefixParameter}JobProcess"
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt JobQueue.Arn
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt JobTable.Arn
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt JobLookupCustomerFunction.Arn
      Roles:
        - !Ref JobProcessFunctionRole

  JobProcessFunction:
    Type: "AWS::Serverless::Function"
    DependsOn: JobProcessFunctionPolicy
    Properties:
      FunctionName: !Sub "lambda${PrefixParameter}JobProcess"
      CodeUri: src/jobProcess/
      Handler: handler.handler
      Role: !GetAtt JobProcessFunctionRole.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt JobQueue.Arn
            BatchSize: 10
            Enabled: true
      Environment:
        Variables:
          JOB_TABLE: !Ref JobTable
          JOB_LOOKUP_CUSTOMER: !GetAtt JobLookupCustomerFunction.Arn

  JobLookupCustomerFunction:
    Type: "AWS::Serverless::Function"
    DependsOn: JobLookupCustomerFunctionPolicy
    Properties:
      FunctionName: !Sub "lambda${PrefixParameter}JobLookupCustomer"
      Timeout: 120
      CodeUri: src/jobLookupCustomer/
      Handler: handler.handler
      Role: !GetAtt JobLookupCustomerFunctionRole.Arn
      Environment:
        Variables:
          JOB_TABLE: !Ref JobTable

  JobLookupCustomerFunctionPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "policy${PrefixParameter}JobLookupCustomer"
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt JobTable.Arn
      Roles:
        - !Ref JobLookupCustomerFunctionRole

  JobLookupCustomerFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "role${PrefixParameter}JobLookupCustomer"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

Outputs:
  JobQueue:
    Description: "Job Queue name"
    Value: !Ref JobQueue
  JobTable:
    Description: "Job Table"
    Value: !Ref JobTable
  JobSubmissionFunction:
    Description: "Job Submission function name"
    Value: !Ref JobSubmissionFunction
  JobProcessFunction:
    Description: "Job Process function name"
    Value: !Ref JobProcessFunction
  JobLookupCustomerFunction:
    Description: "Job Lookup Customer function name"
    Value: !Ref JobLookupCustomerFunction

    